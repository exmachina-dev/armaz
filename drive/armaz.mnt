Bitfield StatusNetData
    all As 0 To 7
    drive_ready As 0 To 0
    drive_enable As 1 To 1
    drive_input As 2 To 2
    motor_brake As 3 To 3
    motor_temp As 4 To 4
    timeout As 5 To 5
End Bitfield

Bitfield CommandNetData
    all As 0 To 11
    drive_enable As 0 To 0
    cancel_command As 1 To 1
    clear_errors As 2 To 2
    reset_command As 3 To 3
    control_mode  As 4 To 6
    position_mode As 7 To 7
    move_mode As 8 To 8
    go_command As 9 To 9
    set_home As 10 To 10
    go_home As 11 To 11
    stop_command As 12 To 12
End Bitfield

Const _bus = _busETHERNET

Const _netdataRefreshRate = 200 
Const _statusSlowRefreshRate = 10 

Const _enTqEnableRefreshRate = 0
Const _enTqDisableRefreshRate = 100

Const _cmdTimeout = 1000     'Command timeout
Const _axis = 0

Dim _max_speed As Float
If DRIVEID(_axis) = "ARMAZ.FLAT" Then
    _max_speed = 4000
ElseIf DRIVEID(_axis) = "ARMAZ.HEAVY" Or DRIVEID(_axis) = "ARMAZ.FAST" Then
    _max_speed = 4300
Else
    _max_speed = 0
End If

Dim _torque_constant As Float
If MOTORCATALOGNO(_axis) = "BSM80N-175AF" Then
    _torque_constant = 0.85      ' BSM80N-175
ElseIf MOTORCATALOGNO(_axis) = "BSM80N-275AF" Then
    _torque_constant = 0.904     ' BSM80N-275
ElseIf MOTORCATALOGNO(_axis) = "BSM90N-175BF" Then
    _torque_constant = 0.853     ' BSM90N-175
End If

Dim cmdTime As Time
Dim cmdTimeoutStatus As Integer = 0
Dim positionMode As Integer
Dim moveMode As Integer
Dim enTqMode As Integer = 0
Dim enTq As Float = 0
Dim enTqRef As Float = 0
Dim enTqDirection As Integer = 0
Dim enTqVelRef As Float = 0
Dim enTqKP As Float = 1.25
Dim enTqKPVel As Float = 1
Dim enTqLimitKP As Float = 1.15
Dim enTqKI As Float = 0.1
Dim enTqKD As Float = 0.0

Dim enTqVelLimitKP As Float = 1.025
Dim enTqVelErrorSum As Float
Dim enTqVelErrorSumLimit As Float = 200
Dim enTqVelErrorPrev As Float
Dim enTqVelErrorKP As Float = 1.25
Dim enTqVelErrorKPLimitLow As Float = 0.25
Dim enTqVelErrorKPLimitHigh As Float = 2
Dim enTqVelErrorKI As Float = 0.08
Dim enTqVelErrorKD As Float = 0

TaskPriority(UpdateStatusSlowTask, 1)
TaskPriority(UpdateNetdataValuesTask, 10)

Run(UpdateNetdataValuesTask)
Run(UpdateStatusSlowTask)
Loop
    If enTqMode And DRIVEENABLE(_axis) Then
        If enTqVelRef = 0 Then
            TORQUEREF(_axis) = 0
            Wait(_enTqEnableRefreshRate)
            Continue Loop
        End If
        
        ' Set torque limit
        Dim enTqLimit As Float
        enTqLimit = enTqRef * enTqLimitKP
        
        ' VelError mapping to torque values
        Dim enTqVelError As Float
        enTqVelError = (enTqVelRef - VEL(_axis)) / 100
        enTqVelErrorSum = enTqVelErrorSum + enTqVelError
        
        ' pTerm KP = f(VelRef)
        If enTqKPVel <> 1 Then
            enTqVelErrorKP = enTqKP * ((Abs(enTqVelRef) * enTqKPVel) / 100)
            If enTqVelErrorKP < enTqVelErrorKPLimitLow Then
                enTqVelErrorKP = enTqVelErrorKPLimitLow
            ElseIf enTqVelErrorKP > enTqVelErrorKPLimitHigh Then
                enTqVelErrorKP = enTqVelErrorKPLimitHigh
            End If
        Else
            enTqVelErrorKP = enTqKP
        End If
        
        ' iTerm KI
        If enTqKI <> 0 Then
            enTqVelErrorKI = enTqKI
        End If
        
        ' dTerm KD
        enTqVelErrorKD = enTqKD
        
        
        ' iTerm VelErrorSum clamp
        If enTqVelErrorSum > enTqVelErrorSumLimit Then
            enTqVelErrorSum = enTqVelErrorSumLimit
        ElseIf enTqVelErrorSum < -enTqVelErrorSumLimit Then
            enTqVelErrorSum = -enTqVelErrorSumLimit
        End If

        Dim pTerm As Float
        Dim iTerm As Float
        Dim dTerm As Float
        pTerm = enTqVelError * enTqVelErrorKP
        iTerm = enTqVelErrorSum * enTqVelErrorKI
        dTerm = (enTqVelError - enTqVelErrorPrev) * enTqVelErrorKD
        
        If iTerm > enTqLimit Then
            iTerm = enTqLimit
        ElseIf iTerm < -enTqLimit Then
            iTerm = -enTqLimit
        End If
            
        enTq =  pTerm + iTerm + dTerm
 
        If enTq > enTqLimit Then
            enTq = enTqLimit
        ElseIf enTq < -enTqLimit Then
            enTq = -enTqLimit
        End If
            
        TORQUEREF(_axis) = enTq
        
        enTqVelErrorPrev = enTqVelError
            
        'Wait(_enTqEnableRefreshRate)
    Else
        Wait(_enTqDisableRefreshRate)
    End If
End Loop


Task UpdateNetdataValuesTask
    Loop
        NetdataValues
        Status
        StatusSlow
        'CommandTimeout
        Wait(_netdataRefreshRate)
    End Loop
End Task

Task UpdateStatusSlowTask
    Loop
        StatusSlow
        Wait(_statusSlowRefreshRate)
    End Loop
End Task

Sub Status()
    Dim stData As StatusNetData
    stData.all = 0
    
    stData.drive_ready = DRIVEENABLEREADY(_axis)
    stData.drive_enable = DRIVEENABLE(_axis)
    stData.drive_input = DRIVEENABLESWITCH(_axis)
    stData.motor_brake = ~MOTORBRAKESTATUS(_axis)
    stData.motor_temp = MOTORTEMPERATURESWITCH(_axis)
    stData.timeout = cmdTimeoutStatus

    NETINTEGER(0) = stData.all
    'NETINTEGER(1) is W-O
    NETINTEGER(2) = ERRCODE
    
    NETFLOAT(3) = JOG(_axis)
    If enTqMode Then
        NETFLOAT(4) = enTqRef
        NETFLOAT(5) = enTqVelRef
    ElseIf CONTROLMODE(_axis) = 3 Then
        NETFLOAT(4) = TORQUEREF(_axis)
        NETFLOAT(5) = SPEED(_axis)
    Else
        NETFLOAT(4) = TORQUEREF(_axis)
        NETFLOAT(5) = VELREF(_axis)
    End If
    'NETFLOAT(6) is W-O
    NETFLOAT(10) = TORQUEREFRISETIME(_axis)
    NETFLOAT(11) = TORQUEREFFALLTIME(_axis)
    NETFLOAT(12) = ACCEL(_axis)
    NETFLOAT(13) = DECEL(_axis)
    NETFLOAT(14) = enTqKP
    NETFLOAT(15) = enTqKPVel
    NETFLOAT(16) = enTqKI
    NETFLOAT(17) = enTqKD

End Sub

Sub StatusSlow()
    NETFLOAT(62) = TEMPERATURE(0)
    NETINTEGER(63) = MODBUSPARAMETER(_busETHERNET, _mpDROPPED_FRAMES)
End Sub

Sub NetdataValues()
    NETFLOAT(50) = CURRENTMEAS(_axis, 5)
    NETFLOAT(51) = VEL(_axis)
    NETFLOAT(52) = POS(_axis)
    NETFLOAT(53) = POSTARGET(_axis)
    NETFLOAT(54) = POSREMAINING(_axis)
    NETFLOAT(55) = ENCODER(0)
    NETFLOAT(56) = ENCODERVEL(0)
    NETFLOAT(57) = VELERROR(_axis)
    NETFLOAT(58) = FOLERROR(_axis)
    NETFLOAT(59) = CurrentToTorque(CURRENTMEAS(_axis, 5))
    NETFLOAT(60) = CurrentRatio(CURRENTMEAS(_axis, 5))
    NETFLOAT(61) = EFFORT(_axis)
End Sub

Sub CommandTimeout()
    If cmdTime > _cmdTimeout Then
        STOP(_axis)
        cmdTimeoutStatus = 1
    End If
End Sub

Sub ResetCommandTimeout()
    cmdTime = 0
    cmdTimeoutStatus = 0
End Sub

Sub ResetEnhancedTorqueMode()
    enTqVelErrorSum = 0
    enTqRef = 0
    enTqVelRef = 0
End Sub

Function TorqueToCurrent(ByVal torque) As Float
    TorqueToCurrent = torque / _torque_constant
End Function

Function CurrentToTorque(ByVal current) As Float
    CurrentToTorque =  current * _torque_constant
End Function

Function CurrentRatio(ByVal current) As Float
    CurrentRatio =  (current / DRIVERATEDCURRENT(_axis)) * 100
End Function

Function ClampToMaxSpeed(ByVal nSpeed As Float) As Float
    If nSpeed > _max_speed Then
        ClampToMaxSpeed = _max_speed
    ElseIf nSpeed < _max_speed * -1 Then
        ClampToMaxSpeed = _max_speed * -1
    Else
        ClampToMaxSpeed = nSpeed
    End If
End Function

Event NETDATA1 
    Dim prevCommand As CommandNetData
    Dim command As CommandNetData
    prevCommand = command
    command.all = NETINTEGER(1)
    
    If command.drive_enable = 1 Then
        If DRIVEENABLEREADY(_axis) Then
            DRIVEENABLE(_axis) = 1
        Else
            command.drive_enable = 0
        End If
    Else
        DRIVEENABLE(_axis) = 0
    End If
    
    If command.cancel_command = 1 Then
        CANCEL(_axis)
    End If
    command.cancel_command = 0
    
    If command.clear_errors = 1 Then
        ERRORCLEAR(_egALL, _axis)
        
        command.clear_errors = 0
    End If

    If command.reset_command = 1 Then
        STOP(_axis)
        ResetEnhancedTorqueMode
        ABORT
        ERRORCLEAR(_egALL, _axis)
        command.reset_command = 0
    End If

    If command.control_mode <> 0 Then
        If command.control_mode <= 3 Then
            CONTROLMODE(_axis) = command.control_mode
            enTqMode = 0
        ElseIf command.control_mode = 4 Then
            enTqMode = 1
        Else
            enTqMode = 0
        End If
        command.control_mode = 0
    End If

    positionMode = command.position_mode 'O: Absolute 1: Relative

    If command.move_mode <> 0 Then '0: Accumulative 1: Replace
    	'CONTOURMODE(_axis) = _ctmCONTOUR_OFF
    	moveMode = 0
  	Else
    	'CONTOURMODE(_axis) = _ctmCONTOUR_ON
    	moveMode = 1
   	End If


    If command.go_command <> 0 AndAlso CONTROLMODE(_axis) = 3 Then
        GO(_axis)
        command.go_command = 0
    End If

    If command.set_home <> 0 Then
        POS(_axis) = 0
        command.set_home = 0
    End If

    If command.go_home <> 0 AndAlso CONTROLMODE(_axis) = 3 Then
        MOVEA(_axis) = 0
        GO(_axis)
        command.go_home = 0
    End If

    If command.stop_command <> 0 Then
        STOP(_axis)
        command.stop_command = 0
    End If

    NETINTEGER(1) = command.all
    
    ResetCommandTimeout
End Event
    
Event NETDATA3
    Dim cmdSpeed As Float
    cmdSpeed = NETFLOAT(3)
    
    If cmdSpeed <> 0 Then
        JOG(_axis) = ClampToMaxSpeed(cmdSpeed)
    Else
        STOP(_axis)
    End If
    ResetCommandTimeout
End Event

Event NETDATA4
    Dim cmdTqRef As Float
    cmdTqRef = NETFLOAT(4)
    
    If cmdTqRef <> 0 Then
        If enTqMode Then
            enTqRef = Abs(cmdTqRef)
        Else
            TORQUEREF(_axis) = cmdTqRef
        End If
    Else
        If enTqMode Then
            enTqRef = 0
        Else
            TORQUEREF(_axis) = 0
        End If
        STOP(_axis)
    End If
    ResetCommandTimeout
End Event

Event NETDATA5
    Dim cmdVelRef As Float
    cmdVelRef = ClampToMaxSpeed(NETFLOAT(5))
    
    If cmdVelRef <> 0 Then
        If enTqMode Then
            enTqVelRef = cmdVelRef
            enTqDirection = Int(Abs(enTqVelRef) / enTqVelRef)
        ElseIf CONTROLMODE(_axis) = 3 Then
            SPEED(_axis) = Abs(cmdVelRef)
        Else
            VELREF(_axis) = cmdVelRef
        End If
    Else
        VELREF(_axis) = 0
        SPEED(_axis) = 0
        enTqVelRef = 0
        STOP(_axis)
    End If
    ResetCommandTimeout
End Event

Event NETDATA6
    If CONTROLMODE(_axis) <> 3 Then
        Exit Event
    End If

    Dim cmdPosRef As Float
    cmdPosRef = NETFLOAT(6)
    
    If positionMode <> 0 Then
        MOVER(_axis) = cmdPosRef
    Else
        MOVEA(_axis) = cmdPosRef
    End If
    NETFLOAT(6) = 0
    ResetCommandTimeout
End Event

Event NETDATA10
    Dim cmdTqRiseTime As Float
    cmdTqRiseTime = NETFLOAT(10)
    
    TORQUEREFRISETIME(_axis) = cmdTqRiseTime
    ResetCommandTimeout
End Event

Event NETDATA11
    Dim cmdTqFallTime As Float
    cmdTqFallTime = NETFLOAT(11)
    
    TORQUEREFFALLTIME(_axis) = cmdTqFallTime
    ResetCommandTimeout
End Event

Event NETDATA12
    Dim cmdAcceleration As Float
    cmdAcceleration = NETFLOAT(12)
    
    If cmdAcceleration <> 0 Then
        ACCEL(_axis) = cmdAcceleration
    End If
    ResetCommandTimeout
End Event

Event NETDATA13
    Dim cmdDeceleration As Float
    cmdDeceleration = NETFLOAT(13)
    
    If cmdDeceleration <> 0 Then
        DECEL(_axis) = cmdDeceleration
    End If
    ResetCommandTimeout
End Event

Event NETDATA14
    Dim cmdEnTqKP As Float
    cmdEnTqKP = NETFLOAT(14)
    
    If cmdEnTqKP >= 0 Then
        enTqKP = cmdEnTqKP
    End If
    ResetCommandTimeout
End Event

Event NETDATA15
    Dim cmdEnTqKPVel As Float
    cmdEnTqKPVel = NETFLOAT(15)
    
    If cmdEnTqKPVel >= 0 Then
        enTqKPVel = cmdEnTqKPVel
    End If
    ResetCommandTimeout
End Event

Event NETDATA16
    Dim cmdEnTqKI As Float
    cmdEnTqKI = NETFLOAT(16)
    
    If cmdEnTqKI >= 0 Then
        enTqKI = cmdEnTqKI
    End If
    ResetCommandTimeout
End Event

Event NETDATA17
    Dim cmdEnTqKD As Float
    cmdEnTqKD = NETFLOAT(17)
    
    If cmdEnTqKD >= 0 Then
        enTqKD = cmdEnTqKD
    End If
    ResetCommandTimeout
End Event

Event ONERROR
    Dim nAxis As Integer

    'Read the next error and handle accordingly
    If ERRORREADNEXT(_egALL, -1) Then 
        nAxis = ERRDATA(1)
        NETINTEGER(3) = ERRCODE

        'If we have an axis error or warning
        If ( ERRCODE >= 10000 ) And ( ERRCODE < 30000 ) Then
            Select Case ERRCODE
                Case _ecERROR_INPUT 
                    'Handle error input

                Case _ecFWD_HARD_LIMIT, _ecREV_HARD_LIMIT
                    ' Handle limits
                    CANCEL(_axis)

                Case _ecKINT_LIMIT
                    'Handle integrator windup

                Case _ecMOTION_IN_PROGRESS
                    'Don't do anything

                Case Else
                    'All other errors and warnings handled here
                    STOP(_axis)

            End Select
            Exit Event
        End If

        If ERRCODE = _ecTABLE_ERROR Then
            'Inform user there is no table data
            Exit Event
        End If

        'All other errors halt program
        Print #_TERM2, "Error code: ", ERRCODE
        Print #_TERM2, "Description: ", ERRSTRING
        Print #_TERM2, "Axis (if applicable): ", ERRDATA(1)
        Print #_TERM2, "Line number (if applicable): ", ERRLINE
        Print #_TERM2, "Time: ", ERRTIME

        'Stop all motion and exit program
        ABORT
    End If
End Event

Startup
    Auto
    
    If _bus = _busSERIAL1 Then
        BUSNODE(_bus) = 2                                            'MicroFlex e100 is node 2 on RTU network
        SERIALBAUD(_TERM1) = 57600                                   'Running at 57.6kbaud (default)
    End If

    MODBUSPARAMETER(_bus, _mpBYTE_ORDER) = 0                         'Use big endian byte order (default)
    MODBUSPARAMETER(_bus, _mpWORD_ORDER) = 0                         'Use big endian word order (default: little endian)
    MODBUSPARAMETER(_bus, _mpREGISTER_MAPPING) = _rmNET_DATA         'Use Net data for data exchange
    MODBUSPARAMETER(_bus, _mpENABLE) = 1                             'Finally enable Modbus TCP communication
    
    ENCODERPRESCALE(_axis) = 32
    SCALEFACTOR(_axis) = 10000 / 60 / 32
    
End Startup